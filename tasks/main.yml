---
- name: allow all INPUT
  command: /sbin/iptables -P INPUT ACCEPT

- name: flush iptables
  command: /sbin/iptables -F

- name: iptables-config 
  template: src=../templates/iptables-config dest=/etc/sysconfig

- name: save iptables
  command: /sbin/iptables-save

- name: restart iptables
  service: name=iptables state=restarted enabled=yes

- name: set selinux to permissive
  selinux: policy=targeted state=permissive

# Setup dhcpd
- name: install components for dhcp
  yum: name={{ item }} state=present
  with_items:
   - dhcp

- name: configure dhcp
  template: src=../templates/dhcpd.conf dest=/etc/dhcp/dhcpd.conf
  notify: restart dhcpd

# TFTP
- name: install components CentOS
  yum: name={{ item }} state=present
  with_items:
   - xinetd
   - syslinux
   - tftp-server
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: install components Debian
  apt: name={{ item }} state=present
  with_items:
   - xinetd
   - tftpd
   - tftp
   - syslinux
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: configure xinetd
  template: src=../templates/tftp dest=/etc/xinetd.d/tftp
  notify: restart xinetd

- name: iptables-config 
  template: src=../templates/iptables-config dest=/etc/sysconfig
  notify: restart iptables

#- name: chkconfig on
#  service: name={{ item }} enabled=yes
#  with_items:
#   - xinetd
#  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: make tftp boot dir
  file: path={{ tftp_root }} state=directory

- name: file perms for tftproot
  file: path={{ tftp_root }} mode=0777

- name: copy autodeploy zip
  copy: src=/home/deploy-tftp.zip dest=/tftpboot/deploy-tftp.zip

- name: unzip autodeploy zip
  command: chdir={{ tftp_root }} /usr/bin/unzip deploy-tftp.zip

- name: rm autodeploy zip
  command: /bin/rm {{ tftp_root }}/deploy-tftp.zip

- name: ensure assets directory exists
  file: dest=/assets owner=root state=directory
- name: unarchive ovftool.zip
  unarchive: src="{{ ovftool_zip }}" dest=/assets copy=yes

# PowerCLI
- name: install perl and other dependencies for powercli installer
  yum: name={{ item }} state=present
  with_items:
  - perl
  - openssl-devel
  - perl-Crypt-SSLeay
  - perl-CPAN
  - libuuid-devel
  - libxml2-devel
- name: install developer tools for CPAN
  command: "yum groupinstall -y 'Development Tools'"
- name: install Fatal.pm via CPAN
  command: "cpan -i Fatal"
- name: unarchive powercli installer
  unarchive: src="{{ net_powercli_url }}" dest=/tmp copy=yes
- name: patch installer to accept EULA
  lineinfile: dest=/tmp/vmware-vsphere-cli-distrib/vmware-install.pl line='  show_EULA();' state=absent
- name: patch installer to use CPAN
  lineinfile: dest=/tmp/vmware-vsphere-cli-distrib/vmware-install.pl line='         $install_rhel55_local = 1;' state=absent
- name: patch installer to install CPAN versions of Perl modules
  replace: dest=/tmp/vmware-vsphere-cli-distrib/vmware-install.pl regexp="^(.*)if\ \(get_answer\('Do\ you\ want\ to\ continue(.*)$" replace=" if (undef){"
- name: run powercli installer
  command: "perl /tmp/vmware-vsphere-cli-distrib/vmware-install.pl -d"
